//SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

import "./ERC721A.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";

contract GadjahSociety is ERC721A, Ownable {
    using Strings for uint256;
    using Counters for Counters.Counter;

    Counters.Counter private supply;

    string public baseURI = "";
    string public baseExtension = ".json";
    string public notRevealedURI;
    uint256 public cost = 0.06 ether;
    uint256 public presaleCost = 0.04 ether;
    uint256 public maxSupply = 100;
    uint256 public maxMintAmountPerTx = 5;
    uint256 public presaleMintLimit = 5;
    uint256 public nftPerAddressLimit = 20;
    bytes32 public merkleRoot =
        0x53212ebf251123d3330d409768d5fb8e236c010403ef565e7d1afaf79665a1fa;
    bool public preSale = true;
    bool public publicSale = false;
    bool public paused = false;
    bool public revealed = false;

    constructor() ERC721A("Gadjah Test 4", "GDJHT", 5) {
        setNotRevealedURI(
            "https://ipfs.io/ipfs/QmWj1cuT4mqwPMC5P5CYk51nzWuDEUyA5huEeWA9m4dtfg"
        );
    }

    modifier mintCompliance(uint256 _mintAmount) {
        require(
            (_mintAmount > 0) && (_mintAmount <= maxMintAmountPerTx),
            "Invalid mint amount!"
        );
        require(
            supply.current() + _mintAmount <= maxSupply,
            "Max supply exceeded!"
        );
        _;
    }

    modifier saleStarted() {
        require(publicSale, "Sale has not started yet");
        _;
    }

    modifier notPaused() {
        require(!paused, "the contract is paused");
        _;
    }

    modifier PresaleStarted() {
        require(preSale, "Presale has not started yet");
        _;
    }

    // Public function //

    function mint(uint256 _mintAmount) public payable notPaused saleStarted {
        uint256 ownerTokenCount = balanceOf(msg.sender);
        require(
            ownerTokenCount + _mintAmount <= nftPerAddressLimit,
            "max NFT per Wallet exceeded"
        );
        require(msg.value >= cost * _mintAmount, "insufficient funds");
        require(
            _mintAmount <= maxMintAmountPerTx,
            "max mint amount per transaction exceeded"
        );
        require(
            supply.current() + _mintAmount <= maxSupply,
            "MaxSupply exceeded"
        );

        _safeMint(_msgSender(), _mintAmount);
    }

    function mintPresale(uint256 _mintAmount, bytes32[] calldata merkleProof)
        external
        payable
        notPaused
    {
        require(preSale, "Presale has not started");
        uint256 ownerMintCount = balanceOf(msg.sender);
        require(
            MerkleProof.verify(
                merkleProof,
                merkleRoot,
                keccak256(abi.encodePacked(msg.sender))
            ),
            "You are not eligible for the presale"
        );
        require(
            ownerMintCount + _mintAmount <= presaleMintLimit,
            "Presale limit for this wallet reached"
        );
        require(
            _mintAmount <= maxMintAmountPerTx,
            "Cannot purchase this many NFT in a transaction"
        );
        require(
            supply.current() + _mintAmount <= maxSupply,
            "Minting would exceed max supply"
        );
        require(_mintAmount > 0, "Must mint at least one token");
        require(msg.value >= cost * _mintAmount, "ETH amount is low");

        _safeMint(_msgSender(), _mintAmount);
    }

    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {
        merkleRoot = _merkleRoot;
    }

    function walletOfOwner(address _owner)
        public
        view
        returns (uint256[] memory)
    {
        uint256 ownerTokenCount = balanceOf(_owner);
        uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
        uint256 currentTokenId = 1;
        uint256 ownedTokenIndex = 0;

        while (
            ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply
        ) {
            address currentTokenOwner = ownerOf(currentTokenId);

            if (currentTokenOwner == _owner) {
                ownedTokenIds[ownedTokenIndex] = currentTokenId;

                ownedTokenIndex++;
            }

            currentTokenId++;
        }

        return ownedTokenIds;
    }

    function tokenURI(uint256 _tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(
            _exists(_tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );

        // Check if nft is not already revealed
        if (!revealed) {
            // If not yet, return not revealed uri
            return notRevealedURI;
        }

        string memory currentBaseURI = _baseURI();
        return
            bytes(currentBaseURI).length > 0
                ? string(
                    abi.encodePacked(
                        currentBaseURI,
                        _tokenId.toString(),
                        baseExtension
                    )
                )
                : "";
    }

    function getCurrentCost() public view returns (uint256) {
        if (preSale) {
            return presaleCost;
        } else {
            return cost;
        }
    }

    // Only owner //

    function mintForAddress(uint256 _mintAmount, address _receiver)
        public
        mintCompliance(_mintAmount)
        onlyOwner
    {
        supply.increment();
        _safeMint(_receiver, _mintAmount);
    }

    function setRevealed(bool _state) public onlyOwner {
        revealed = _state;
    }

    function setCost(uint256 _cost) public onlyOwner {
        // In wei not ether
        cost = _cost;
    }

    function setPresaleCost(uint256 _presaleCost) public onlyOwner {
        presaleCost = _presaleCost;
    }

    function setMaxMintAmountPerTx(uint256 _maxMintAmountPerTx)
        public
        onlyOwner
    {
        maxMintAmountPerTx = _maxMintAmountPerTx;
    }

    function setPresaleMintLimit(uint256 _presaleMintLimit) public onlyOwner {
        presaleMintLimit = _presaleMintLimit;
    }

    function setBaseURI(string memory _newBaseURI) public onlyOwner {
        baseURI = _newBaseURI;
    }

    function setBaseExtension(string memory _baseExtension) public onlyOwner {
        baseExtension = _baseExtension;
    }

    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
        notRevealedURI = _notRevealedURI;
    }

    function setNftPerAddressLimit(uint256 _limit) public onlyOwner {
        nftPerAddressLimit = _limit;
    }

    function setPause(bool _state) public onlyOwner {
        paused = _state;
    }

    function setMaxSupply(uint256 _maxSupply) public onlyOwner {
        maxSupply = _maxSupply;
    }

    function togglepreSale(bool _state) external onlyOwner {
        preSale = _state;
    }

    function togglepublicSale(bool _state) external onlyOwner {
        publicSale = _state;
    }

    function withdraw() public onlyOwner {
        // Put remain balance to owner address
        (bool os, ) = payable(owner()).call{value: address(this).balance}("");
        require(os);
    }

    // Internal //

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }
}
