//SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract GadjahSociety is ERC721, Ownable {
    using Strings for uint256;
    using Counters for Counters.Counter;

    Counters.Counter private supply;

    string public baseURI = "";
    string public baseExtension = ".json";
    string public notRevealedURI;
    uint256 public cost = 0.06 ether;
    uint256 public presaleCost = 0.04 ether;
    uint256 public maxSupply = 100;
    uint256 public maxMintAmountPerTx = 4;
    uint256 public nftPerAddressLimit = 8;
    bool public revealed = false;
    bool public paused = false;
    bool public onPresale = true;
    address[] public whitelist;

    mapping(address => uint256) public addressMintBalance;

    constructor() ERC721("Gadjah Test", "GDJHT") {
        setNotRevealedURI(
            "https://ipfs.io/ipfs/QmWj1cuT4mqwPMC5P5CYk51nzWuDEUyA5huEeWA9m4dtfg"
        );
    }

    modifier mintCompliance(uint256 _mintAmount) {
        require(
            (_mintAmount > 0) && (_mintAmount <= maxMintAmountPerTx),
            "Invalid mint amount! Max mint amount is 4"
        );
        require(
            supply.current() + _mintAmount <= maxSupply,
            "Max supply exceeded!"
        );
        _;
    }

    // Public function //

    function mint(uint256 _mintAmount)
        public
        payable
        mintCompliance(_mintAmount)
    {
        require(!paused, "The contract is paused!");
        if (onPresale) {
            require(isWhitelisted(msg.sender), "User is not in whitelist");
            uint256 ownerMintCount = addressMintBalance[msg.sender];
            require(
                ownerMintCount + _mintAmount <= nftPerAddressLimit,
                "Max NFT per address reached"
            );
            require(
                msg.value >= presaleCost * _mintAmount,
                "Insufficient funds!"
            );
        } else {
            require(msg.value >= cost * _mintAmount, "Insufficient funds!");
        }

        _mintLoop(msg.sender, _mintAmount);
    }

    function totalSupply() public view returns (uint256) {
        return supply.current();
    }

    function walletOfOwner(address _owner)
        public
        view
        returns (uint256[] memory)
    {
        uint256 ownerTokenCount = balanceOf(_owner);
        uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
        uint256 currentTokenId = 1;
        uint256 ownedTokenIndex = 0;

        while (
            ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply
        ) {
            address currentTokenOwner = ownerOf(currentTokenId);

            if (currentTokenOwner == _owner) {
                ownedTokenIds[ownedTokenIndex] = currentTokenId;

                ownedTokenIndex++;
            }

            currentTokenId++;
        }

        return ownedTokenIds;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(
            _exists(tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );

        // Check if nft is not already revealed
        if (!revealed) {
            // If not yet, return not revealed uri
            return notRevealedURI;
        }

        string memory currentBaseURI = _baseURI();
        return
            bytes(currentBaseURI).length > 0
                ? string(
                    abi.encodePacked(
                        currentBaseURI,
                        tokenId.toString(),
                        baseExtension
                    )
                )
                : "";
    }

    function isWhitelisted(address _user) public view returns (bool) {
        for (uint256 i = 0; i < whitelist.length; i++) {
            if (whitelist[i] == _user) {
                return true;
            }
        }
        return false;
    }

    // Only owner //

    function mintForAddress(uint256 _mintAmount, address _receiver)
        public
        mintCompliance(_mintAmount)
        onlyOwner
    {
        _mintLoop(_receiver, _mintAmount);
    }

    function setRevealed(bool _state) public onlyOwner {
        revealed = _state;
    }

    function setCost(uint256 _cost) public onlyOwner {
        // In wei not ether
        cost = _cost;
    }

    function setPresaleCost(uint256 _presaleCost) public onlyOwner {
        presaleCost = _presaleCost;
    }

    function setmaxMintAmountPerTx(uint256 _newmaxMintAmountPerTx)
        public
        onlyOwner
    {
        maxMintAmountPerTx = _newmaxMintAmountPerTx;
    }

    function setNftPerAddressLimit(uint256 _nftPerAddressLimit)
        public
        onlyOwner
    {
        nftPerAddressLimit = _nftPerAddressLimit;
    }

    function setBaseURI(string memory _newBaseURI) public onlyOwner {
        baseURI = _newBaseURI;
    }

    function setBaseExtension(string memory _baseExtension) public onlyOwner {
        baseExtension = _baseExtension;
    }

    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
        notRevealedURI = _notRevealedURI;
    }

    function setPause(bool _state) public onlyOwner {
        paused = _state;
    }

    // Set all whitelist ( format ["0xA", "0xA"] )
    function setWhitelist(address[] calldata _whitelist) public onlyOwner {
        delete whitelist;
        whitelist = _whitelist;
    }

    function setPresaleStatus(bool _state) public onlyOwner {
        onPresale = _state;
    }

    function withdraw() public onlyOwner {
        // Put remain balance to owner address
        (bool os, ) = payable(owner()).call{value: address(this).balance}("");
        require(os);
    }

    // Internal //

    function _mintLoop(address _receiver, uint256 _mintAmount) internal {
        for (uint256 i = 0; i < _mintAmount; i++) {
            supply.increment();
            _safeMint(_receiver, supply.current());
        }
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }
}
